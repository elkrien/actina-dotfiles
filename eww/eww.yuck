;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    WIDGETS    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;; WIFI WIDGET

;; Wifi variables
(defvar wifi_rev false)
(defpoll COL_WLAN :interval "1m" "~/.config/eww/scripts/wifi.sh --COL")
(defpoll ESSID_WLAN :interval "1m" "~/.config/eww/scripts/wifi.sh --ESSID")
(defpoll WLAN_ICON :interval "1m" "~/.config/eww/scripts/wifi.sh --ICON")

;; WiFi widget
(defwidget wifi [] 
  (eventbox 
    :tooltip "WIFI" 
    :onhover "eww update wifi_rev=true"
		:onhoverlost "eww update wifi_rev=false"
		(box 
      :vexpand "false" 
      :hexpand "false" 
      :space-evenly "false"
			(eventbox 
        :cursor "hand"
        (button 
          :class "module-wifi" 
          :onclick "alacritty -e nmtui" 
          :wrap "false" 
          :limit-width 12 
          :style "color: ${COL_WLAN};" WLAN_ICON
        )
      )
	    (revealer 
        :transition "slideright"
			  :reveal wifi_rev
			  :duration "350ms"
	      (label  
          :class "module_essid"
			    :text ESSID_WLAN
          :style "color: ${COL_WLAN};"
			    :orientation "h"
			  )
      )
    )
  )
)

;;;;;; UPDATES WIDGET

;; Updates variables
(defvar upd false)
(defpoll COL_UPDATES :interval "10m" "~/.config/eww/scripts/updates.sh --COL")
(defpoll TEXT_UPDATES :interval "10m" "~/.config/eww/scripts/updates.sh --UPDATES")
(defpoll ICON_UPDATES :interval "10m" "~/.config/eww/scripts/updates.sh --ICON")

;; Updates widget
(defwidget updates [] 
  (eventbox 
    :tooltip "System updates" 
    :onhover "eww update upd=true"
    :onhoverlost "eww update upd=false"
		(box 
      :vexpand "false" 
      :hexpand "false" 
      :space-evenly "false"
      (eventbox 
        :cursor "hand"
        (button 
          :class "module-updates-icon" 
          :onclick "alacritty -e sudo pacman -Syu && paru -Sua" 
          :wrap "false" 
          :limit-width 20 
          :style "color: ${COL_UPDATES};" ICON_UPDATES
        )
      )
	    (revealer 
        :transition "slideright"
        :reveal upd
        :duration "350ms"
	      (label
          :class "module-updates-text"
          :text TEXT_UPDATES
          :style "color: ${COL_UPDATES};"			  
          :orientation "h"
			  )
      )
    )
  )
)

;;;;;; SOUND AND MICROPHONE WIDGETS

;; Volume and mic variables
(defvar volum false)
(defvar micvolum false)
(defpoll volumepoll :interval "999s" "./scripts/volume.sh")
(defpoll micvolumepoll :interval "999s" "./scripts/micvolume.sh")

;; Volume widget
(defwidget volume []
  (eventbox 
    :tooltip "Sound volume: ${volumepoll.content}%" 
    :onhover "eww update volum=true && eww update currentVolume=$(pamixer --get-volume)"   
    :onhoverlost "eww update volum=false"
    (box 
      :orientation "h" 
      :space-evenly false 
      (eventbox 
        :cursor "hand"
        (button 
          :class "${volumepoll.class} label" 
          :onclick `eww update volumepoll="$(./scripts/volume.sh toggle)"` "${volumepoll.icon} "
        )
      )
      (revealer
        :transition "slideleft" 
			  :reveal volum
			  :duration "500ms"
        (scale
          :class "volumeBar"
          :min 0
          :max 101
          :onchange `eww update volumepoll="$(./scripts/volume.sh {})"`
          :value "${volumepoll.content}"
        )
      )
    )
  )
)

;; Microphone widget
(defwidget micvolume []
  (eventbox
    :tooltip "Mic volume: ${micvolumepoll.content}%"
    :onhover "eww update micvolum=true"
    :onhoverlost "eww update micvolum=false"
    (box
      :orientation "h"
      :space-evenly false
      (eventbox
        :cursor "hand"
        (button
          :class "${micvolumepoll.class} label"
          :onclick `eww update micvolumepoll="$(./scripts/micvolume.sh toggle)"` "${micvolumepoll.icon} "
        )
      )
      (revealer
        :transition "slideleft"
			  :reveal micvolum
			  :duration "500ms"
        (scale
          :class "volumemicBar"
          :min 0
          :max 101
          :onchange `eww update micvolumepoll="$(./scripts/micvolume.sh {})"`
          :value "${micvolumepoll.content}"
        )
      )
    )
  )
)

;;;;;; POWER MEMU WIDGET

;; Power menu variables
(defvar power_m false)

;; Power menu widget
(defwidget power []
	(eventbox
    :hexpand false
    :onhover "eww update power_m=true"
		:onhoverlost "eww update power_m=false"
    :cursor "hand"
	  (box
      :orientation "h"
			:space-evenly "false"
      :class "powerLabel label"
      (button
        :class "button-off"					
				:tooltip "Shutdown"
				:onclick "shutdown now"	""
      )
	    (revealer
        :transition "slideright"
				:reveal power_m
				:duration "250ms"
        (box
          :space-evenly true
  	      (button
            :class "button-reb"				
	  			  :tooltip "Reboot"
				    :onclick "reboot" ""
          )
  	      (button
            :class "button-lock"
	  			  :tooltip "Lockscreen"
				    :onclick "~/.scripts/lock.sh" ""
          )
  	      (button
            :class "button-sleep"
	  			  :tooltip "Sleep"
				    :onclick "systemctl suspend" ""
          )
          (button
            :class "button-logout"
            :tooltip "Logout"
            :onclick "pkill -f leftwm" ""
          )
        )
      )
    )
  )
)

; ;;;;;; BRIGHTNESS WIDGET
;
; ;; Brightness variables
; (defvar bright false)
; (defpoll current-brightness :interval "1s" "brightnessctl -m -d intel_backlight | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
;
; ;; Brightness widget
; (defwidget bright []
;   (eventbox 
;     :tooltip "Brightness: ${current-brightness}%" 
;     :onhover "eww update bright=true"   
;     :onhoverlost "eww update bright=false"
;     (box 
;       :orientation "h" 
;       :space-evenly false 
;       (eventbox 
;         :cursor "hand"
;         (button 
;           :class "brightness-icon" 
;           ""
;         )
;       )
;       (revealer
;         :transition "slideleft" 
; 			  :reveal bright
; 			  :duration "500ms"
;         (scale
;           :class "bribar"
;           :min 0
;           :max 101
;           :onchange "brightnessctl set {}%"
;           :value current-brightness
;         )
;       )
;     )
;   )
; )

;;;;;; DATE AND TIME WIDGET

;; Date and time variables
(defvar time false)
(defpoll timeVar :interval "10s" "date '+%H:%M'")
(defpoll dateVar :interval "600s" "date '+%A, %d-%m-%Y'")

;; Date and time widget
(defwidget time []
  (eventbox
    :cursor "hand"
	  (button
      :class "date"	
			:tooltip "${dateVar}"
			:onclick "eww open --toggle calendar"	"${timeVar}"
    )
  )
)

; ;;;;;; BATTERY WIDGET
;
; ;; Battery widget variables
; (defpoll battery :interval "1s"	"~/.config/eww/scripts/battery.sh icon")
; (defpoll battery-cappacity :interval "1s"	"~/.config/eww/scripts/battery.sh percent")
;
; ;; Battery widget
; (defwidget bat []
; 	(box	
;     :vexpand "false" 
;     :hexpand "false" 
;     :orientation "h"	
; 		:space-evenly "false"
; 	  (label	
;       :class "bat"		
; 		  :halign "end"		
; 		  :text battery	
; 		  :tooltip "Battery: ${battery-cappacity}%"
;     )
;   )
; )

;;;;;; WORKSPACES WIDGET

;; Workspaces widget variables
(deflisten wm-tags "leftwm-state -w 0 -t ~/.config/leftwm/themes/current/template.liquid")

;; Workspaces widget
(defwidget workspaces []
  (box 
    :class "workspaces"
    :orientation "h"
    :space-evenly true
    :valign "center"
    :halign "start"
    :spacing 8
    (literal 
      :content {wm-tags}
    )
  )
)

;;;;;; MUSIC BAR CONTROLS WIDGET

;; Music bar variables
(defpoll music-icon :interval "1s" "~/.config/eww/scripts/music.sh get-icon")
(deflisten music-name "playerctl --follow metadata --format '{{ artist }} - {{ title }}'")
(deflisten music-title "playerctl --follow metadata --format {{title}}")

;; Music bar widget
(defwidget music []
  (box 
    :orientation "h"
    :space-evenly false   
    :tooltip music-name
    (button 
      :onclick "playerctl previous"
      :class "prev-next-icon" "ﭢ"
    )
    (button 
      :onclick "~/.config/eww/scripts/music.sh toggle-music"
      :class "music-icon" music-icon
    )
    (button 
      :onclick "playerctl next"
      :class "prev-next-icon" "ﭠ"
    )
    (button
      :onclick "eww open --toggle music-player-window"
      :class "music-title-bar" 
      (label
        :text music-title
        :limit-width 30
      )
    )
  )
)

;;;;;; MUSIC PLAYER WIDGET

;; Music player variables
(defpoll playercontrols :interval "1s" "scripts/music-window.sh")

;; Music player widget
(defwidget music-player []
  (box :class "player"
    (literal :content playercontrols :valign "center")
  )
)

;;;;;; MAIN BAR WIDGET

(defwidget bar []
  (centerbox
    (box 
      :space-evenly false 
      :orientation "h"     
      (music)
    )
    (box 
      :space-evenly false 
      :orientation "h"
      (workspaces)
    )
    (box 
      :halign "end" 
      :hexpand true 
      :orientation "h" 
      :space-evenly false
      (updates)
      ; (bat)
      ; (bright)
      (volume)
      (micvolume)
      (wifi)
      (time)
      (power)
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    WINDOWS    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; CALENDAR WINDOW 

(defwindow calendar
	:geometry 
    (geometry 
      :x "-1%" 
	    :y "4%" 
		  :width "270px" 
		  :height "60px"
      :anchor "top right"
    )
    (calendar 
      :class "cal"
    )
)

;; BAR WINDOW

(defwindow bar 
    :monitor 0
    :wm-ignore false
    :reserve 
      (struts 
        :distance "38px" 
        :side "top"
      )
    :windowtype "dock"
    :stacking "bg"
    :geometry 
      (geometry 
        :width "100%"
        :height "20px"
        :anchor "top left"
      )
    (bar)
)

;; MUSIC PLAYER WINDOW

(defwindow music-player-window
  :monitor 0
  :wm-ignore true
  :geometry (geometry :x "20"
                      :y "40"
                      :width "600"
                      :height "240px"
                      :anchor "top left")
  (music-player)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;; NOT USED WIDGETS AND WINDOWS ;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;; WEATHER WIDGET

;; Weather Variables
;;(defvar weather false)
;;(defpoll temperature :interval "20m" "curl -s 'wttr.in/Rzeszów?format=%c%t'")
;;(defpoll weatherstats :interval "30m" "curl -s 'wttr.in/Rzeszów?format=%C&lang=pl'")
;;(defpoll weathertooltip :interval "30m" "curl -s 'wttr.in/Rzeszów?format=4'")

;; Weather widget
;;(defwidget weather []
;;	(eventbox
;;    :hexpand false
;;    :cursor "hand"
;;    :onhover "eww update weather=true"
;;		:onhoverlost "eww update weather=false"
;;	  (box
;;      :orientation "h"			
;;			:space-evenly "false"
;;      :class "weather"
;;      (label
;;        :class "weather"				
;;				:tooltip "${weathertooltip}"
;;        :limit-width "15"
;;        :wrap false
;;        :text "${temperature}"
;;      )
;;      (revealer
;;        :transition "slideright"
;;				:reveal weather		 
;;				:duration "250ms"
;;  	    (label
;;          :class "weather-details"
;;				  :tooltip "${weathertooltip}"
;;          :limit-width "30"
;;          :wrap false
;;				  :text "${weatherstats}"
;;        )
;;      )
;;    )
;;  )
;;)

;;;;;;; MEMORY STATUS WIDGET
;;(defwidget mem []
;;  (box
;;    :vexpand "false"
;;    :hexpand "false"
;;    (circular-progress
;;      :value {EWW_RAM.used_mem_perc}
;;      :class "membar"
;;      :start-angle 0
;;      :thickness 4
;;      (button
;;        :class "iconmem"
;;        :limit-width 2
;;        :tooltip " ${round(EWW_RAM.used_mem_perc,1)}%"
;;        :show_truncated false
;;        :wrap false
;;        ""
;;      )
;;    )
;;  )
;;)

;;;; CPU STATUS WIDGET
;;(defwidget cpu []
;;  (box
;;    :vexpand "false"
;;    :hexpand "false"
;;    (circular-progress
;;      :value {EWW_CPU.avg}
;;      :class "cpubar"
;;      :start-angle 0
;;      :thickness 4
;;      (button
;;        :class "iconmem"
;;        :limit-width 2
;;        :tooltip " ${round(EWW_CPU.avg,1)}%"
;;        :show_truncated false
;;        :wrap false
;;        ""
;;      )
;;    )
;;  )
;;)

;;;; HDD STATUS WIDGET
;;(defwidget disk []
;;  (box
;;    :vexpand "false"
;;    :hexpand "false"
;;    (circular-progress
;;      :value {EWW_DISK["/"].used_perc}
;;      :class "diskbar"
;;      :start-angle 0
;;      :thickness 4
;;      (button
;;        :class "iconmem"
;;        :limit-width 2
;;        :tooltip " ${round(EWW_DISK["/"].used_perc,1)}%"
;;        :show_truncated false
;;        :wrap false
;;        ""
;;      )
;;    )
;;  )
;;)
